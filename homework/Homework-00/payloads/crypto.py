import itertools
from tqdm import tqdm
from Crypto.Util.number import long_to_bytes, getPrime


p = 92017932396773207330365205210913184771249549355771692523246399384571269833668487945963934319507538171501041280674304304879328757539798699280378034748542218248740777575679398093116579809607067129824965250071416089841516538588253944223235904445546895574651603636188746948921937704060334290364304972412697492577
enc = 87051682992840829567429886737255563980229964191963649650455667117285375334750716083826527488071966389632402954644144719710970265754062176648776448421065665281172133368294041777397049228273163978348132440822019295870429065335674151133125629968366491582233750452365390672536361224322642295053741696809519283644
hint = 112112804524582393858675176460595338484428048338611753655869733059768929120327158352572131172253127933611583356499525126040647290513660017529498493355846656594143774393256151536590212031416153303085867445488047592792290033548349001067687775149867134619114482370143917491889371548968347491490942978508386339813

# keys = list(range(5))
# keys[4] = pow(4668, 65537, p)
# print("keys[4] is:", keys[4])

# # give keys[3] all available values
# keys[3] = {pow(i, 65537, p) ^ keys[4] ^ hint for i in range(3002, 4000)}
# keys[2] = [pow(i, 65537, p) for i in range(2002, 3000)]
# keys[1] = [pow(i, 65537, p) for i in range(1002, 2000)]
# keys[0] = [pow(i, 65537, p) for i in range(2, 1000)]

# for i in range(998):
#     print(i)
#     for j in range(998):
#         for k in range(998):    
#             if keys[0][i] ^ keys[1][j] ^ keys[2][k] in keys[3]:
#                 print("keys[0] is:", keys[0][i])
#                 print("keys[1] is:", keys[1][j])
#                 print("keys[2] is:", keys[2][k])
#                 print("keys[3] is:", keys[0][i] ^ keys[1][j] ^ keys[2][k] ^ keys[4] ^ hint)

# keys[0] is: 27282099447799948279418879140387403224460974349395089145563804439854308652838793236090712958984717694808483575840857966852185257061935718292506014114504325173209838747625707285350188671830154452240461781527825597736828801402308622357831115606124150222699527811527649602385873901299217193786453014368146914185
# keys[1] is: 90214748008296669686589521404740829471310347806803491354114453846931189259516739139403985765336495640012484452792741835738744934331803167067937502125598843877938821807680357838350357900228537628027791881221921298725961392152961179847390687976615342031110617889332115047550036821550258022415507313724651275755
# keys[2] is: 76636548792571179778796827631638732934468299835406807682504391549257577246244996985345182413083513795424242591479908411315883373095095780572458480237133537131577512997355477281795125656979499315024226756933014714840771281617550561155957784316323975309693353220836911271316961230656557468648654564996677273897
# keys[3] is: 34897580423318486723626448199382326367874131292040758527224307277549424993037525662289153796201419415082579919339923587092760620754093648693123146156205628514276177614630159729175869939340542965084592835080203525642803357078451385363110587851824337147350885504210421506297773695222353634835392639758231646699
# keys[4] is: 71337694139522244982715330159142042168006918029630729930667493233345673624428033212096454599489689393693878116503044658069046263113266928437784865852222607399307377673893146573417405720707711043610770180718533054453601226392617313437118804209768971485667456720473739540219762319907165473506225024012869782853

key_0 = 27282099447799948279418879140387403224460974349395089145563804439854308652838793236090712958984717694808483575840857966852185257061935718292506014114504325173209838747625707285350188671830154452240461781527825597736828801402308622357831115606124150222699527811527649602385873901299217193786453014368146914185
key_1 = 90214748008296669686589521404740829471310347806803491354114453846931189259516739139403985765336495640012484452792741835738744934331803167067937502125598843877938821807680357838350357900228537628027791881221921298725961392152961179847390687976615342031110617889332115047550036821550258022415507313724651275755
key_2 = 76636548792571179778796827631638732934468299835406807682504391549257577246244996985345182413083513795424242591479908411315883373095095780572458480237133537131577512997355477281795125656979499315024226756933014714840771281617550561155957784316323975309693353220836911271316961230656557468648654564996677273897
key_3 = 34897580423318486723626448199382326367874131292040758527224307277549424993037525662289153796201419415082579919339923587092760620754093648693123146156205628514276177614630159729175869939340542965084592835080203525642803357078451385363110587851824337147350885504210421506297773695222353634835392639758231646699
key_4 = 71337694139522244982715330159142042168006918029630729930667493233345673624428033212096454599489689393693878116503044658069046263113266928437784865852222607399307377673893146573417405720707711043610770180718533054453601226392617313437118804209768971485667456720473739540219762319907165473506225024012869782853

# enc = flag * key_0 * key_1 * key_2 * key_3 * key_4 


flag = enc * pow(key_0 * key_1 * key_2 * key_3 * key_4, -1, p) % p
print(flag)

FLAG = long_to_bytes(flag)
print(FLAG)

